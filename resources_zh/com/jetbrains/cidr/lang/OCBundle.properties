create.file.title=File
create.file.description=Creates a new file
create.field.name=&Name:
create.field.name.category=Category &Name:
create.field.location=&Folder:
create.field.language=&Language:
create.field.class=&Class:
create.field.type=Ty&pe:
create.checkbox.targets=&Add to targets
create.tooltip.no.targets=No suitable targets
create.error.invalid.name=Name ''{0}'' is invalid
create.error.missing.target.dir=Can't find the target directory
create.error.dir.exists=A directory with name ''{0}'' already exists
create.error.file.exists=A file with name ''{0}'' already exists
create.folder.dialog.title=Choose Destination Folder
create.folder.dialog.description=Choose destination folder
create.tooltip.arrows.type=Pressing Up or Down arrows while in editor changes the type
create.class.title=Class
create.class.dialog.title=New Objective-C Class
create.cpp.class.title=C++ Class
create.cpp.class.description=Creates a new C++ class
create.cpp.class.dialog.title=New C++ Class
create.checkbox.cpp.class.header=Create &header only
create.cpp.source.title=C/C++ Source File
create.cpp.header.title=C/C++ Header File
create.checkbox.source.associated.header=Create an associated &header
create.class.description=Creates a new Objective-C class and a Header file
create.protocol.title=Protocol
create.protocol.description=Creates a new Objective-C Protocol
create.protocol.dialog.title=New Objective-C Protocol
create.category.title=Category
create.category.description=Creates a new Objective-C Category
create.category.dialog.title=New Objective-C Category
create.checkbox.category.interface=Create &interface file
create.category.no.class.dialog=Can''t find class ''{0}''.\nDo you want to create the category?
create.category.no.class.dialog.title=Invalid Class
create.implementation.title=Implementation
create.implementation.description=Creates a new Implementation
create.interface.title=Interface
create.interface.description=Creates a new Interface
create.class.error=Cannot create a new Objective-C class
create.protocol.error=Cannot create a new Objective-C protocol
create.category.error=Cannot create a new Objective-C category
create.class.file.exist.error.title=Unable to Create File
create.class.file.exist.error.message=File ''{0}'' already exists in the selected location, please choose another name.
create.directory.failed=Unable to Create Directory
create.directory.failed.message=Unable to create directory ''{0}''!
create.strings.title=Strings file
create.strings.description=Creates a new strings file
create.strings.dialog.title=New Strings File

codeassists.quickFix=Quick Fixes
codeassists.altInsert=Generate Code
codeassists.parameterInfo=Parameter Info
codeassists.liveTemplates=Live Templates
codeassists.surroundwith.expression=Surround With
refactoring.localize=Localize Strings
refactoring.categoryElement.not.in.project=Selected element is in a category on the class which is not located inside the project
refactoring.category.not.in.project=Selected element is a category on the class which is not located inside the project
navigation.class.hierarchy=Class Hierarchy

refactoring.changeSignature=Change Signature
refactoring.inlineConst=Inline Constant
refactoring.inlineLocalVar=Inline Variable
refactoring.inlineMacro=Inline Macro
refactoring.inlineMethod=Inline Method
refactoring.inlineParameter=Inline Parameter
refactoring.inlineTypedef=Inline Typedef
refactoring.introduceDefine=Introduce Define
refactoring.introduceConstant=Introduce Constant
refactoring.introduceIvar=Introduce Ivar
refactoring.introduceParameter=Introduce Parameter
refactoring.introduceProperty=Introduce Property
refactoring.introduceTypedef=Introduce Typedef
refactoring.appCodeIntroduceVariable=Introduce Variable
refactoring.convertToProperty=Convert to Property
refactoring.convertToIvar=Convert to Ivar
refactoring.convertToMethod=Convert to Method/Function
refactoring.convertIvarUsagesToProperties=&Convert ivar usages to properties
refactoring.convertToLiteral=Introduce Objective-C literal
refactoring.extractSubclass=Extract Subclass
refactoring.extractSuperclass=Extract Superclass
refactoring.extractSuperProtocol=Extract Protocol
refactoring.extractCategory=Extract Category
refactoring.extractMethod=Extract Method/Function
refactoring.extractBlockParameter=Extract Block Parameter
refactoring.moveMembers=Move Members
refactoring.moveTopLevel=Move Top Level Declarations
refactoring.pullUp=Pull Members Up
refactoring.pushDown=Push Members Down
refactoring.ambiguous=Ambiguous functions can't be refactored
codeassists.new.cmake.project=New CMake Project Generation

title.function.return.type.group=After function return type
title.function.top.return.type=In global and namespace scopes
title.function.nontop.return.type=In class scope
title.function.parameters.group=Function declaration parameters
title.function.call.arguments.group=Function call arguments
title.template.decl.class.group=Template class declaration
title.template.decl.func.group=Template function declaration
title.template.parameters.group=Template declaration parameters
title.template.call.arguments.group=Template instantiation arguments
title.ctor.init.list.group=Constructor initialization list
title.superclass.list.group=Base class list
title.shift.operators.group='<<', '>>' operators
title.capture.list.group=Lambda capture list

wrapping.new.line.after.lt=New line after '<'
wrapping.gt.on.new.line=Place '>' on new line
wrapping.align.multiline.parentheses=Align multiline parentheses
wrapping.align.multiline.brackets=Align multiline brackets
wrapping.align.multiline.lt.gt=Align multiline '<','>'
wrapping.keep.simple.case.inline=Keep simple cases in one line
wrapping.keep.simple.methods.in.one.line=Simple functions in one line
wrapping.keep.simple.methods.in.one.line.oc=Simple methods and functions in one line
wrapping.keep.simple.blocks.in.one.line=Simple lambdas in one line
wrapping.keep.simple.blocks.in.one.line.oc=Simple blocks and lambdas in one line
wrapping.keep.nested.namespaces.in.one.line=Keep nested namespaces in one line
wrapping.keep.directive.at.first.column=Directive at first column
wrapping.brace.placement.class.declaration=In classes and structures
wrapping.try.statement='try' statement
wrapping.catch.on.new.line='catch' on new line
wrapping.array.initializer=Initializer lists
wrapping.array.initializer.oc=Collection literals and initializer lists
wrapping.align.multiline.fields.groups=Variable groups
wrapping.align.in.columns=Align in columns
wrapping.structures.in.one.line=Classes and structures in one line
wrapping.before.brace.namespace=In namespaces
wrapping.ternary.short.inline=Non-breaking '?\:' in 'a ?\: b'
wrapping.try.statement.oc='@try' statement
wrapping.catch.on.new.line.oc='@catch' on new line
wrapping.finally.on.new.line.oc='@finally' on new line
wrapping.array.initializer.lbrace.on.next.line.oc=New line after '{', '['
wrapping.array.initializer.rbrace.on.next.line.oc=Place '}', ']' on new line
wrapping.method.brace.placement=In methods
wrapping.function.brace.placement=In functions
wrapping.block.brace.placement=In lambdas
wrapping.block.brace.placement.oc=In blocks and lambdas
wrapping.method.parameters.align.by.colons=Align by colons
wrapping.method.call.arguments.special.dictionary.pairs.treatment=Special NSDictionary initialization treatment
wrapping.indent.template.body.if.wrapped=Indent template body if wrapped
wrapping.new.line.after.colon=New line after ':'
wrapping.new.line.before.colon=Place ':' on new line

wrapping.new.line.never=Never
wrapping.new.line.always=Always
wrapping.new.line.if.long=If long

align.dictionary.values=Align dictionary values in columns
align.init.list.values=Align initializer list values in columns

space.within.empty.code.blocks=Empty code braces
space.within.template=Within <...>
space.within.empty.diamond=Within empty <>
space.within.template.double.gt=Prevent >> concatenation in template
space.within.bracket=Array brackets
space.within.array.initializer.braces=Initializer lists braces
space.within.array.empty.initializer.braces=Empty initializer lists braces
space.within.array.initializer.braces.oc=Collection literals and initializer lists braces
space.within.array.empty.initializer.braces.oc=Empty collection literals and initializer lists braces
space.within.function.declaration.parentheses=Function declaration parentheses
space.within.empty.function.declaration.parentheses=Empty function declaration parentheses
space.within.function.call.parentheses=Function call parentheses
space.within.empty.function.call.parentheses=Empty function call parentheses
space.within.lambda.capture.list.brackets=Lambda capture list brackets
space.within.empty.lambda.capture.list.brackets=Empty lambda capture list brackets

space.within.catch.parentheses.oc='@catch' parentheses
space.within.synchronized.parentheses.oc='@synchronized' parentheses
space.within.protocols.brackets.oc=Protocols list brackets
space.within.property.attributes.parentheses.oc='@property' attributes parentheses
space.within.method.return.type.parentheses.oc=Method return type parentheses
space.within.method.parameter.type.parentheses.oc=Method parameter type parentheses
space.within.send.message.brackets.oc=Send message brackets
space.within.template.declaration=In Template Declaration
space.within.template.inst=In Template Instantiation

space.within.class=In Class/Structure
space.before.initialization.lists.colon=Before constructor initialization list colon
space.after.initialization.lists.colon=After constructor initialization list colon

space.before.lt.template=Before '<'
space.before.function.call.parentheses=Function call parentheses
space.before.function.parentheses=Function declaration parentheses
space.before.class.lbrace=Class/structure left brace
space.before.method.lbrace=Function left brace
space.before.method.lbrace.oc=Method/function left brace
space.before.namespace.lbrace=Namespace left brace
space.before.init.list.lbrace=Initializer list left brace
space.before.superclass.colon=Before base class colon
space.before.pointer.in.declaration=Before '*' in declarations
space.before.reference.in.declaration=Before '\\&' in declarations
space.before.catch.parentheses.oc='@catch' parentheses
space.before.try.lbrace.oc='@try' left brace
space.before.catch.lbrace.oc='@catch' left brace
space.before.finally.lbrace.oc='@finally' left brace
space.before.synchronized.lbrace.oc='@synchronized' left brace
space.before.catch.keyword.oc='@catch' keyword
space.before.finally.keyword.oc='@finally' keyword
space.before.synchronized.parentheses.oc='@synchronized' parentheses
space.before.autorelease.pool.lbrace.oc='@autoreleasepool' left brace
space.before.category.parentheses.oc=Before category parentheses
space.before.protocols.brackets.oc=Before protocols list brackets
space.before.chained.send.message.oc=Before chained message send
space.before.property.attributes.parentheses.oc='@property' attributes parentheses
space.before.dictionary.literal.colon.oc=Before colon in dictionary literal 'key\:value' pair

space.after.superclass.colon=After base class colon
space.after.structures.rbrace=After right brace in structures
space.after.pointer.in.declaration=After '*' in declarations
space.after.reference.in.declaration=After '\\&' in declarations
space.after.reference.in.rvalue=After dereference and address-of
space.after.method.return.type.parentheses.oc=After method return type parentheses
space.after.method.parameter.type.parentheses.oc=After method parameter type parentheses
space.after.visibility.sign.in.method.declaration.oc=After +/- in method declarations
space.after.colon.in.selector.oc=After colon in selectors
space.after.cup.in.blocks.oc=After '^' in blocks
space.after.dictionary.literal.colon.oc=After colon in dictionary literal 'key\:value' pair

space.between.adjacent.brackets=Keep space between the same-type brackets
space.between.operator.punctuator=Between 'operator' keyword and punctuator
space.discharged.short.ternary.operator=Space between '?' and '\:' in 'a ? \: b'
space.around.shift.operators=Shift operators (<<, >>)
space.around.lambda.arrow='->' in return type
space.around.pm.operators=Pointer-to-member operators (->, ., ->*, .*)

blank.lines.before.includes=Before includes:
blank.lines.after.includes=After includes:

blank.lines.around.classes=Around class/structure:
blank.lines.after.class.header=After class/structure header:

blank.lines.around.member.variable=Around field:
blank.lines.around.member.variable.oc=Around instance variable/field:
blank.lines.around.global.variable=Around global variable:

blank.lines.around.function.declaration=Around function declaration:
blank.lines.around.function.declaration.oc=Around method/function declaration:
blank.lines.around.function.definition=Around function definition:
blank.lines.around.function.definition.oc=Around method/function definition:

blank.lines.before.function.body=Before function body:
blank.lines.before.function.body.oc=Before method/function body:

collapse.ivars=Instance variables
collapse.synthesizes=Synthesize statements
collapse.localized.strings=Localized strings
collapse.multiline.comments=Multiline comments
collapse.block.expressions.oc=Blocks and lambdas
collapse.block.expressions=Lambdas
collapse.conditionally.non-compiled=Conditionally non-compiled code
collapse.template.param.list=Template parameters

color.this.keywords='this' keyword
color.preprocessor.directive=Preprocessor//Directive
color.preprocessor.path=Preprocessor//Header path
color.format.string.token=Format specifier in string argument
color.conditionally.non-compiled=Conditionally non-compiled code
color.macro.name=Macro name
color.macro.parameter=Macro parameter
color.global.variable=Global variable
color.extern.variable=Extern variable
color.struct.union.oc=Struct/enum/union
color.struct.union=Class/struct/enum/union
color.struct.field=Struct field
color.template.type=Template type
color.template.value=Template value
color.namespace=Namespace
color.enum.const=Enum constant
color.function.declaration=Function declaration
color.function.call=Function call
color.overloaded.operator=Overloaded operator
color.typedef=Typedef
color.label=Label

color.this.keywords.oc='self','super','this' keywords
color.instance.variable.oc=Instance variable
color.method.declaration.oc=Method declaration
color.method.call.oc=Method call
color.property.oc=Property
color.property.attribute.oc=Property attribute
color.class.reference.oc=Class
color.protocol.reference.oc=Protocol
color.generic.parameter.oc=Generic parameter

indent.namespace=Indent members of namespace
indent.interface.protocol=Indent members of '@interface' and '@protocol'
indent.not.ivar=Except instance variables list
indent.implementation=Indent members of '@implementation'
indent.visibility.keywords=Indent visibility keywords in class/structure
indent.block=Indent in lambdas
indent.block.oc=Indent in blocks and lambdas
indent.c.struct=Indent members of plain structures
indent.class=Indent members of classes
indent.class.oc=Indent members of C++ classes
indent.preprocessor.directive=Preprocessor directive indent
indent.preprocessor.directive.as.code=Follow code indent
indent.preprocessor.directive.after.hash=Indent after #

checkbox.block.comment.indent=Indent new lines in block comments

fileExtensions.tabName=New File Extensions
fileExtensions.extensionPair=Extension pair
fileExtensions.error=Error
fileExtensions.noExtensionsError=Please define at least one extension pair
fileExtensions.sourceExtension=Source Extension:
fileExtensions.headerExtension=Header Extension:
fileExtensions.fileNamingConvention=File Naming Convention:
fileExtensions.editFileTypesTooltip=Edit File Types
fileExtensions.no.extensions=No extensions
fileExtensions.noCompatibleTypes=No compatible file types found

override.implement.show.optional.members=Show &optional members
override.implement.show.no.optional.members=Show optional members (no optionals)
override.implement.show.only.optional.members=Show optional members (only optionals)

override.implement.show.synthesized.accessors=Show synthesized accessors
override.implement.show.no.synthesized.accessors=Show synthesized accessors (no accessors)
override.implement.show.only.synthesized.accessors=Show synthesized accessors (only accessors)

override.implement.cpp.action.title=Override/Implement Functions
override.implement.cpp.action.name=Override Functions...
override.implement.cpp.action.memberChooserTitle=Choose Functions to Override/Implement
override.implement.cpp.action.noMember={0} has no functions to override/implement
override.implement.cpp.action.noParent=No functions to override/implement
override.implement.cpp.action.insertOverride=Insert "override" attribute
override.implement.cpp.action.showNonVirtual=Show non-virtual functions
override.implement.cpp.action.insertVirtualWithOverride=Insert "virtual" attribute together with "override"

implement.cpp.action.name=Implement Functions...
implement.cpp.action.memberChooserTitle=Choose Functions to Implement
implement.cpp.action.noMember={0} has no functions to implement
implement.cpp.action.noParent=No functions to implement

changeSignature.usages.cantBeUnnamed=Parameter {0} is used and can''t became unnamed
changeSignature.usages.cantBeRemoved=Parameter {0} is used and can''t be removed
changeSignature.usages.cantConvertSelectorToFuncBlock=Can't convert selector expression to function/block
changeSignature.usages.cantConvertToBlock=Can't convert to block:
changeSignature.usages.cantConvertLanguage=Can''t convert usage in {0} code
changeSignature.usages.ambiguousReference=Function {0} is ambiguously referenced
changeSignature.usages.noUsagesFound=no usages are found
changeSignature.usages.moreThan1Found=more than 1 usage is found
changeSignature.usages.usageInsideFunction=usage is inside the function/method
changeSignature.usages.functionHasSeveralDefinitions=Function ''{0}'' has several definitions
changeSignature.usages.atLeasTwoParams=At least two parameters have the name ''{0}''
changeSignature.usages.conflictsWithNewParameter={0} conflicts with the new parameter
changeSignature.usages.unrelatedSelector=Possibly unrelated selector with the same name will be renamed
changeSignature.usages.willConflictWith={0} will conflict with {1}
changeSignature.usages.willConflictWithMethod={0} will conflict with method in {1}
changeSignature.targetNotFound=The caret should be positioned at the function, method or block

find.existing.operators.progress.title=Searching For Existing Operators

generate.inplace.option=Generate in-&place
generate.cpp.progress.title=Generating
generate.cpp.replace.button=&Replace Existing
generate.cpp.add.missing.button=&Add Missing
generate.cpp.show.existing.button=&Show Existing
generate.cpp.usages.string=Occurrences
generate.cpp.usages.word=Occurrence
generate.cpp.usages.cannot.make=Can't complete generation: some files have been changed

generate.definitions=Generate Definitions
generate.definitions.commandName=Generate Definitions
generate.definitions.intention.familyName=Generate definitions
generate.definitions.intention.outsideText=Generate definition
generate.definitions.intention.inlineText=Generate definition in-place
generate.definitions.action.name=Generate Definitions...
generate.definitions.action.title=Generate Definitions
generate.definitions.action.memberChooserTitle=Choose Functions to Generate Definitions for
generate.definitions.action.noParent=No functions to generate definitions for
generate.definitions.action.noMembers={0} has no functions to generate definitions for
generate.definitions.quickfix.inlineText=Generate definition for {0} in-place
generate.definitions.quickfix.outsideText=Generate definition for {0}

generate.comparison.operators.action.title=Generate Comparison Operators
generate.comparison.operators.action.title.eq=Generate Equality Operators
generate.comparison.operators.action.title.rel=Generate Relational Operators
generate.comparison.operators.member.chooser.title=Select Fields to Use
generate.comparison.operators.as.member.option=Generate as class &members
generate.comparison.operators.use.std.tie=Use std::&tie
generate.comparison.operators.as.member.option.desc=Generate operators as class members
generate.comparison.operators.additional.eq.option=Generate != together &with ==
generate.comparison.operators.additional.eq.option.desc=Generate != together with ==
generate.comparison.operators.additional.rel.option=Generate >, <=, >= together &with <
generate.comparison.operators.additional.rel.option.desc=Generate >, <=, >= together with <
generate.comparison.operators.usages.all.defined=All operators are already defined.
generate.comparison.operators.usages.some.defined=Some of the operators are already defined.
generate.comparison.operators.usages.existing.text=Existing Operators

generate.stream.output.action.title=Generate Stream Output Operator
generate.stream.output.member.chooser.title=Select Fields To Use
generate.stream.output.usages.all.defined=Stream output operator is already defined
generate.stream.output.usages.existing.text=Existing Operator

inspections.templateArguments.tooFew=Too few template arguments, expected {0}
inspections.templateArguments.tooFewAtLeast=Too few template arguments, expected at least {0}
inspections.templateArguments.tooMany=Too many template arguments, expected {0}
inspections.templateArguments.tooManyAtMost=Too many template arguments, expected at most {0}
inspections.templateArguments.valueInsteadOfType=Value expected instead of type
inspections.templateArguments.typeInsteadOfValue=Type expected instead of value
inspections.typeChecks.volatileConflict=Assigning non-volatile structure to volatile one
inspections.duplicate.explicitInstantiation=Duplicate explicit instantiation
inspections.typeChecks.neitherNumericNorPointer=Expression of type ''{0}'' is neither numeric nor a pointer
inspections.typeChecks.notNumeric=Expression of type ''{0}'' is not numeric

checkbox.allow.import.in.completion=Auto import in completion

progressbar.long.resolve.description=Resolve operation requires more time...\nIf you cancel, editor actions that depend on resolve will not be available

intentions.insert.cast.use.modern=Use C++ cast operators